## cross compile:

    i686-wrs501-linux-gnu-gcc -I../third-party/bin/linux/gdb.x86-xeon-wrl7/linux-windriver-3.14-r0/include.kernel_export --sysroot=/auto/andpkg/rep_cache//wr-x86/7.0rcpl8/sysroots/core2-64-wrsmllib32-linux pcimem.c
    # sysroot
    A sysroot is a directory which is considered to be the root directory for the purpose of locating headers and libraries.
    So for example if your build toolchain wants to find /usr/include/foo.h but you are cross-compiling and the appropriate foo.h
    is in /my/other/place/usr/include/foo.h, you would use /my/other/place as your sysroot.

## compile & link steps

# How exactly does __attribute__((constructor)) work
    It seems pretty clear that it is supposed to set things up.

    Ask:
        When exactly does it run?
        Why are there two parentheses?
        Is __attribute__ a function? A macro? Syntax?
        Does this work in C? C++?
        Does the function it works with need to be static?
        When does __attribute__((destructor)) run?

    Ans:
        It's run when a shared library is loaded, typically during program startup.
        That's how all GCC attributes are; presumably to distinguish them from function calls.
        GCC-specific syntax.
        Yes, this works in C and C++.
        No, the function does not need to be static.
        The destructor is run when the shared library is unloaded, typically at program exit.

    .init/.fini isn't deprecated. It's still part of the the ELF standard and I'd dare say it will be forever. Code in .init/.fini is run by the loader/runtime-linker when code is loaded/unloaded. I.e. on each ELF load (for example a shared library) code in .init will be run. It's still possible to use that mechanism to achieve about the same thing as with __attribute__((constructor))/((destructor)). It's old-school but it has some benefits.

.ctors/.dtors mechanism for example require support by system-rtl/loader/linker-script. This is far from certain to be available on all systems, for example deeply embedded systems where code executes on bare metal. I.e. even if __attribute__((constructor))/((destructor)) is supported by GCC, it's not certain it will run as it's up to the linker to organize it and to the loader (or in some cases, boot-code) to run it. To use .init/.fini instead, the easiest way is to use linker flags: -init & -fini (i.e. from GCC command line, syntax would be -Wl -init my_init -fini my_fini).

On system supporting both methods, one possible benefit is that code in .init is run before .ctors and code in .fini after .dtors. If order is relevant that's at least one crude but easy way to distinguish between init/exit functions.

A major drawback is that you can't easily have more than one _init and one _fini function per each loadable module and would probably have to fragment code in more .so than motivated. Another is that when using the linker method described above, one replaces the original _init and _fini default functions (provided by crti.o). This is where all sorts of initialization usually occur (on Linux this is where global variable assignment is initialized). A way around that is described here

Notice in the link above that a cascading to the original _init() is not needed as it's still in place. The call in the inline assembly however is x86-mnemonic and calling a function from assembly would look completely different for many other architectures (like ARM for example). I.e. code is not transparent.

.init/.fini and .ctors/.detors mechanisms are similar, but not quite. Code in .init/.fini runs "as is". I.e. you can have several functions in .init/.fini, but it is AFAIK syntactically difficult to put them there fully transparently in pure C without breaking up code in many small .so files.

.ctors/.dtors are differently organized than .init/.fini. .ctors/.dtors sections are both just tables with pointers to functions, and the "caller" is a system-provided loop that calls each function indirectly. I.e. the loop-caller can be architecture specific, but as it's part of the system (if it exists at all i.e.) it doesn't matter.

The following snippet adds new function pointers to the .ctors function array, principally the same way as __attribute__((constructor)) does (method can coexist with __attribute__((constructor))).

#define SECTION( S ) __attribute__ ((section ( S )))
void test(void) {
   printf("Hello\n");
}
void (*funcptr)(void) SECTION(".ctors") =test;
void (*funcptr2)(void) SECTION(".ctors") =test;
void (*funcptr3)(void) SECTION(".dtors") =test;
One can also add the function pointers to a completely different self-invented section. A modified linker script and an additional function mimicking the loader .ctors/.dtors loop is needed in such case. But with it one can achieve better control over execution order, add in-argument and return code handling e.t.a. (In a C++ project for example, it would be useful if in need of something running before or after global constructors).

I'd prefer __attribute__((constructor))/((destructor)) where possible, it's a simple and elegant solution even it feels like cheating. For bare-metal coders like myself, this is just not always an option.

Some good reference in the book Linkers & loaders.

# Shift Operations in C
    Logical. A logical right shift fills the left end with k zeros, giving a result [0, . . . , 0, xw−1, xw−2, . . . xk].
    Arithmetic. An arithmetic right shift fills the left end with k repetitions of the most significant bit, giving a result [xw−1, . . . , xw−1, xw−1, xw−2, . . . xk]. This convention might seem peculiar, but as we will see, it is useful for operating on signed integer data.
    The C standards do not precisely define which type of right shift should be used with signed numbers—either arithmetic or logical shifts may be used. This unfortunately means that any code assuming one form or the other will potentially encounter portability problems. In practice, however, almost all compiler/machine combinations use arithmetic right shifts for signed data, and many programmers assume this to be the case. For unsigned data, on the other hand, right shifts must be logical.
    In contrast to C, Java has a precise definition of how right shifts should be performed. The expression x >> k shifts x arithmetically by k positions, while x >>> k shifts it logically.

# sizeof vs sizeof()
    "When sizeof's operand is a type, it has to be enclosed in parentheses. But when sizeof's operand is a variable, this is not required."
    --Expert C Programming: Deep C secrets. And from c11 standard:
        sizeof unary-expression
        sizeof ( type-name )

# NULL
    from stdio.h
    #define NULL 0

# file io
    c lib
        FILE *fp;
        FILE *fopen(char *name, char *mode);
        fp = fopen(name, mode); //read ("r"), write ("w"), and append ("a")
        int getc(FILE *fp)  //getc returns the next character from a file
        int putc(int c, FILE *fp)   //putc writes the character c to the file fp and returns the character written, or EOF if an error occurs.
        int fscanf(FILE *fp, char *format, ...)
        int fprintf(FILE *fp, char *format, ...)
        int fclose(FILE *fp)
        int feof(FILE *fp)      //it returns non-zero if end of file has occurred on the specified file.
        int ferror(FILE *fp)    //The function ferror returns non-zero if an error occurred on the stream fp.
        char *fgets(char *line, int maxline, FILE *fp)  // fgets reads the next input line (including the newline) from file fp into the character array line; at most maxline−1 characters will be read
        int fputs(char *line, FILE *fp) // For output, the function fputs writes a string (which need not contain a newline) to a file

# string operations
    strcat(s,t)	concatenate t to end of s
    strncat(s,t,n)	concatenate n characters of t to end of s
    strcmp(s,t)	return negative, zero, or positive for
    s < t, s == t, or s > t
    strncmp(s,t,n)	same as strcmp but only in first n characters
    strcpy(s,t)	copy t to s
    strncpy(s,t,n)	copy at most n characters of t to s
    strlen(s)	return length of s
    strchr(s,c)	return pointer to first c in s, or NULL if not present
    strrchr(s,c)	return pointer to last c in s, or NULL if not present

# Character Class Testing and Conversion
    isalpha(c)	non-zero if c is alphabetic, 0 if not
    isupper(c)	non-zero if c is upper case, 0 if not
    islower(c)	non-zero if c is lower case, 0 if not
    isdigit(c)	non-zero if c is digit, 0 if not
    isalnum(c)	non-zero if isalpha(c) or isdigit(c), 0 if not
    isspace(c)	non-zero if c is blank, tab, newline, return, formfeed, vertical tab
    toupper(c)	return c converted to upper case
    tolower(c)	return c converted to lower case

# Mathematical Functions
    sin(x)	sine of x, x in radians
    cos(x)	cosine of x, x in radians
    atan2(y,x)	arctangent of y/x, in radians
    exp(x)	exponential function ex
    log(x)	natural (base e) logarithm of x (x > 0)
    log10(x)	common (base 10) logarithm of x (x > 0)
    pow(x,y)	xy
    sqrt(x)	square root of x (x ≥ 0)
    fabs(x)	absolute value of x

# compile
    __attribute__((__packed__))
