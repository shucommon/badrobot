CloudMan https://mp.weixin.qq.com/s/7o8QxGydMTUe4Q7Tz46Diw?

1 Docker ecosystem
    ## container core technology
        container standard  -> Open Container Initiative(OCI)
            runtime spec
            image format spec

        container runtime
            lxc  linux originate, container use this at beginning
            runc docker developped, it's default now
            rkt  developped by CoreOS

        container management tools
            lxd -> lxc
            docker engine -> runc
                deamon
                cli
            rkt cli -> rkt

        container define tools
            docker image : template of docker container, runtime depend on docker image to create container
            dockerfile: contain cmds to create docker image
            ACI(App Container Image): image of rtk by CoreOS

        Registries
            Docker Registry: for enterprise
            Docker Hub (https://hub.docker.com) : public registry
            Quay.io(https://quay.io/) : public registry

        container OS - OS specific for running container
            coreos
            atoic
            ubuntu core

    ## container platform technology - make container running as cluster in distribute system
        container orchestration(编排) engine - container management, schedule, cluster define, service discover, form a microservice application
            docker swarm - developped by docker
            kubernetes - by Google, support docker, CoreOS container
            mesos+marathon

        container manage platform - contruct based on container orchestration
            Rancher
            ContainerShip

        PaaS based on container
            Deis
            Flynn
            Dokku
        
    ## container support technology
        Docker network
            docker network
            flannel
            weave
            calico

        Service discover - save microservice latest info in cluster(ip/port), provide API for outside
            etcd
            consul
            zookeeper

        Monitor
            docker ps/top/stats
            docker stats API - HTTP
            sysdig
            cAdvisor/Heapster
            Weave Scope

        Data manage - migrate between host
            Flocker

        Log manage
            docker logs
            logspout

        Safety
            OpenSCAP

2. Install docker - https://docs.docker.com/install/
    Update the apt package index:
        $ sudo apt-get update

    Install packages to allow apt to use a repository over HTTPS:
        $ sudo apt-get install \
            apt-transport-https \
            ca-certificates \
            curl \
            gnupg-agent \
            software-properties-common

    Add Docker’s official GPG key:
        $ curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -

    Verify that you now have the key with the fingerprint 9DC8 5822 9FC7 DD38 854A E2D8 8D81 803C 0EBF CD88, by searching for the last 8 characters of the fingerprint.
        $ sudo apt-key fingerprint 0EBFCD88
        
        pub   rsa4096 2017-02-22 [SCEA]
              9DC8 5822 9FC7 DD38 854A  E2D8 8D81 803C 0EBF CD88
        uid           [ unknown] Docker Release (CE deb) <docker@docker.com>
        sub   rsa4096 2017-02-22 [S]

    Use the following command to set up the stable repository.
        $ sudo add-apt-repository \
           "deb [arch=amd64] https://download.docker.com/linux/ubuntu \
           $(lsb_release -cs) \
           stable"

    Update the apt package index.
        $ sudo apt-get update

    Install the latest version of Docker CE and containerd, or go to the next step to install a specific version:
        $ sudo apt-get install docker-ce docker-ce-cli containerd.io

    Verify that Docker CE is installed correctly by running the hello-world image.
        $ sudo docker run hello-world

3. Docker construct in details
    ## Docker Client

    ## Docker server - Docker daemon
        docker status:
            $ systemctl status docker.service
        restart daemon:
            $ systemctl daemon-reload
            $ systemctl restart docker.service 
        to allow remote client request:
            /etc/systemd/system/multi-user.target.wants/docker.service, add "-H tcp://0.0.0.0" after ExecStart to allow any IP
        communicate with remoete server(192.168.1.115):
            $ docker -H 192.168.1.115 info(command)        

    ## Docker registry - Image : template to create docker container
        $ docker build <docker-file> 

    ## Registry
        $ docker pull
        $ docker run

    ## Docker Container
        the runtime of docker image

    ## docker conponent cooperate
        $ docker run -d -p 80:80 httpd
        $ docker images [image_name]    -> list local downloaded images
        $ docker ps                     -> list running containers
        $ docker container ls           -> list running containers

4. Docker Image
    ## Dockerfile -> image describe file
        hello-world dockerfile:
            FROM scratch
            COPY hello /        ->copy file hello to /
            CMD ["/hello"]      ->when image run, exec /hello

    ## base image : build from scratch, such as Ubuntu/Debian/CentOS
        CentOS DockerFILE
            FROM scratch
            ADD centos-7-docker.tar.xz /
            CMD ["/bin/bash"]

    ## container rely on host kernel, can't modify the kernel

    ## docker hierarchy
        FROM debian
        RUN apt-get install emacs
        RUN apt-get install apache2
        CMD ["/bin/bash"]
    
        when container start, a new writable layer is added to the top of the image, it's called "container layer", the left is "image layer"
        upper layer same name file will override lowwer layer file
        modify file: loop up from upper image to lower, the first match file will be copied to container layer
        delete file: also from upper layer
        copy-on-wirte - copy only when need modify

    ## Create docker image
        docker commit
            1. run container
                $ docker run -it ubuntu
            2. modify contaier
                $ apt-get install -y vim 
            3. save as new image 
                in host, run '$ docker ps' to get container name
                $ docker commit container_name image_name

        Dockerfile
            FROM ubuntu
            RUN apt-get update && apt-get install -y vim

            $docker build -t new_image_name .  -> . mean build context is current path, search Dockerfile in build content
            $docker build -t new_image_name . -f Dockerfile 
    
            $ docker history container
            $ docker build will try to use cache for exist container, using docker build --no-cache to avoid using cache

            FROM                -> specify base Image
            MAINTAINER          -> set Image auther 
            COPY                -> copy file from build context to Image
                COPY src dest
                COPY ["src", "dest"]
            ADD                 -> save with COPY, except that it will auto extract tar/zip/tgz/xz will copy to Image
            ENV                 -> set environment variable
                '''
                ENV MY_VERSION 1.3
                RUN apt-get install -y mypackage=$MY_VERSION
                '''
            EXPOSE              -> specify a PORT for the process in container
            VOLUME              -> claim file or folder as volume
            WORKDIR             -> set current work dir for subcmd(RUN/CMD/ENTRYPOINT/ADD/COPY)
            RUN                 -> run cmd in container
            CMD                 -> run when container start, only the last CMD have effective, CMD will be replaced by parameter after 'docker run'
            ENTRYPOINT          -> last one have effective, CMD or parameter after 'docker run' will pass to ENTRYPOINT as parameter
                RUN execute cmd and create new Image layer, often used to install software
                CMD set default cmd and parameter to execute after container start. if 'docker run' have parameters, CMD will be replaced
                ENTRYPOINT set cmd to run when container start, if CMD only have parameters, then the parameter will pass to ENTRYPOINT. if ENTRYPOINT using shell method, CMD or 'docker run' parameter will be ignored

        Docker image name
            [image name] = [repository]:[tag]
            docker tag myimage-v1.9.1 myimage:1
            docker tag myimage-v1.9.1 myimage:1.9
            docker tag myimage-v1.9.1 myimage:1.9.1
            docker tag myimage-v1.9.1 myimage:latest

    ## Using public registry
        register account on Docker Hub
        $ docker login -u user_name  / password:
        $ docker tag httpd user_name/httpd:v1   -> set standard name:  [username]/xxx:tag
        $ docker push user_name/httpd:v1
        $ docker push user_name/httpd       -> push all image under same repository

    ## Configure personal registry
        $ docker run -d -p 5000:5000 -v /myregistry:/var/lib/registry registry:2        -> -d deamon -p map container port to host port -v map container /var/lib/registry to host /myregistry
        $ docker tag user_name/httpd:v1 registry.example.net:5000/user_name/httpd:v1    -> rename image to match registry  - [registry-host]:[port]/[username]/xxx
        $ docker push registry.example.net:5000/user_name/httpd:v1
        $ docker pull registry.example.net:5000/user_name/httpd:v1
            
    ## summary
        images    show image list
        history   show image create history
        commit    create new image from container
        build     construct new image from Dockerfile
        tag       set tag for image
        pull      download image from registry
        push      upload image to registry
        rmi       remove Docker host image -> only can delete image in host, not registry
        search    search Docker Hub image
5. Docker cmd
    docker run [-d] [--name name] [-it] [--restart=always] container
        -d means deamon
        --name set container name
        -it iterative
        [--restart=always]  auto restart when stopped, even normal quit
         --restart=on-failure:3   if quit code !0, then restart at most 3 times
        docker run == docker create & docker start
    docker rename
    docker ps [-a]
    docker container ls [-a]
    docker stop short_id | container_name     send SIGTERM
    docker kill short_id | container_name     send SIGKILL
    docker start short_id | container_name    restart the stopped status container 
        start will save the original parameter when container start
        restart == stop && start
    docker pause/unpause short_id | container_name     
    docker attach <container>      ctrl+p then ctrl+q to quit attach
        attach enter same terminal that when the container startup, won't start new process
    docker exec -it <container> bash|sh    exit to quit
        exec open a new ternimal in the container, can start new process
    docker logs -f short_id    -f is samilar with tail -f in funtional
    docker rm short_id | container_name
        rm container 
    docker rmi short_id | container_name
        rm Docker Images 
    docker rm -v $(docker ps -aq -f status=exited)
        rm all exited images

    docker memeory limit setting
        docker run [-m|--memory mem_size] [--memory-swap mem+swap]
            if only set -m, then -swap == -m at default
            docker run -it -m 200M --memory-swap=300M progrium/stress --vm 1 --vm-bytes 280M

    docker cpu limit setting
        docker run [-c|--cpu-shares values(default 1024)]
            relative value, the final cpu resource is decided by the proportion in all the container's cpu share

    docker block io limit setting
        docker run [--blkio-weight values(default 500)]
        bps byte per second
            --device-read-bps，restrict a device's read bps。
            --device-write-bps，restrict a device's write bps。
        io per second
            --device-read-iops，restrict a device's read iops。
            --device-write-iops，restrict a device's write iops。

        docker run -it --device-write-bps /dev/sda:30MB ubuntu

    cgroup - control group - resource restrict
        /sys/fs/cgroup
        /sys/fs/cgroup/cpu/docker
        /sys/fs/cgroup/memory/docker
        /sys/fs/cgroup/blkio/docker
    namespace - resource isolate 
        Mount  isolate fs
        UTS   hostname
        IPC   share memory and semaphore
        PID   all container process is under dockered process
        Network  network-card ip router
        User  user

6. Network - single host

    ##  docker original network 
        when docker installed, 3 network is created
        $ docker network ls
            none/host/bridge
        using --network= to specify network to use for container
            $ docker run -it --network=none busybox     

        none
            only contain lo
        host
            all container connect to host network will share docker host network stack, and have same configuration with host
            the biggest advantage of host network is performance
            another usage is container can configure host network directly
        bridge
            default network for container
            $ sudo apt install bridge-utils
            $ brctl show
                bridge name	bridge id		    STP enabled	interfaces
                docker0		8000.02426a2c0a58	no
            when a container is create, 'veth pair' is created(docker-network-1.png): 
            host docker0 bridge network < vethebf1e41> <-----> container bridge network <eth0@if9>
                        busybox 
                        172.17.0.2       
                        eth0@
                          |
                          |             container
                        ------------------------------
                          |             host 
                          |
                        vethxxxx
                          |
                        docker0
                        172.17.0.1
                        docker host

                qianggu@ubuntu:~$ docker run -it busybox
                / # ip a
                1: lo: <LOOPBACK,UP,LOWER_UP> mtu 65536 qdisc noqueue qlen 1000
                    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00
                    inet 127.0.0.1/8 scope host lo
                       valid_lft forever preferred_lft forever
                8: eth0@if9: <BROADCAST,MULTICAST,UP,LOWER_UP,M-DOWN> mtu 1500 qdisc noqueue 
                    link/ether 02:42:ac:11:00:02 brd ff:ff:ff:ff:ff:ff
                    inet 172.17.0.2/16 brd 172.17.255.255 scope global eth0
                       valid_lft forever preferred_lft forever

                qianggu@ubuntu:~$ brctl show
                bridge name	bridge id		STP enabled	interfaces
                docker0		8000.02426a2c0a58	no		vethebf1e41

            $ docker network inspect bridge
                "Subnet": "172.17.0.0/16",      - the container using bridge network will have this subnet ip address
                "Gateway": "172.17.0.1"         - docker0 ip in host network
                    $ ifconfig docker0

    ## User-defined network driver
        overlay - multi host
        macvlan - multi host
        bridge
            $ docker network create --driver bridge my_net
                5f8626183acae7b0cb44673bcf0f8c2cdc44b7e357c688e8669f142e674f800b
            $ brctl show
                bridge name	        bridge id		    STP enabled	interfaces
                br-5f8626183aca		8000.0242eefeac42	no	                        -> new network bridge created	
                docker0		        8000.02426a2c0a58	no		    vethebf1e41
            $ docker network inspect my_net
                "Name": "my_net",
                "Id": "5f8626183acae7b0cb44673bcf0f8c2cdc44b7e357c688e8669f142e674f800b",
                "Created": "2019-03-04T10:53:55.634973336+08:00",
                "Scope": "local",
                "Driver": "bridge",
                "EnableIPv6": false,
                "IPAM": {
                    "Driver": "default",
                    "Options": {},
                    "Config": [
                        {
                            "Subnet": "172.18.0.0/16",
                            "Gateway": "172.18.0.1"
                        }
                    ]
                },

            Specify subnet gateway when create network:
                $ docker network create --driver bridge --subnet 172.22.16.0/24 --gateway 172.22.16.1 my_net2
                    3b9d06bb6db6e5c22cd5c65ea3f1f75ab2b03aecb043f21e80b45f267d05781d
            $ docker run -it --network=my_net2 busybox      - specify network to use
                inet 172.22.16.2/24
            $ docker run -it --network=my_net2 --ip 172.22.16.8 busybox      - specify network and ip
                inet 172.22.16.8/24
            NOTE: only network created by --subnet can specify static ip

            now, network toplogy (docker-network-2.png):
                        busybox1        busybox2        busybox3
                        172.17.0.2      172.22.16.2     172.22.16.8
                        eth0            eth0            eth0
                          |               |               |
                          |               |               |             container
                        ---------------------------------------------------------
                          |               |               |             host
                          |               |               |
                        veth1           veth2           veth3
                          |               |               |
                          |             +-------------------+
                        docker0         | br-xxxxx          |
                        172.17.0.1      | my_net2           |
                        docker host     | 172.22.16.1       |
                                        +-------------------+
            container using same bridge network can ping each other, also, container can ping gateway, container with different network, can't ping each other
                busybox2 busybox3 is created using same bridge network - my_net2, so they can ping each other in container, but busybox2 can't ping busybox1
                / # ping -I 172.22.16.2 172.22.16.8
                    PING 172.22.16.8 (172.22.16.8) from 172.22.16.2: 56 data bytes
                    64 bytes from 172.22.16.8: seq=0 ttl=64 time=0.097 ms
                    64 bytes from 172.22.16.8: seq=1 ttl=64 time=0.078 ms

                / # ping -I 172.22.16.2 172.22.16.1
                    PING 172.22.16.1 (172.22.16.1) from 172.22.16.2: 56 data bytes
                    64 bytes from 172.22.16.1: seq=0 ttl=64 time=0.083 ms
                    64 bytes from 172.22.16.1: seq=1 ttl=64 time=0.114 ms
                
                Add router for different network also not work, because dockder have isolation in design
                 $ ip r
                 $ sysctl net.ipv4.ip_forward
                 $ sudo iptables-save
                    -A DOCKER-ISOLATION -i br-5d863e9f78b6 -o docker0 -j DROP
                    -A DOCKER-ISOLATION -i docker0 -o br-5d863e9f78b6 -j DROP

                The sulation is to add another same network card(my_net2) for busybox1
                    $ docker ps
                                    CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS              PORTS               NAMES
                       busybox1     c457442c2343        busybox             "sh"                3 hours ago         Up 3 hours                              peaceful_kirch
                       busybox2     79984f432cfe        busybox             "sh"                2 hours ago         Up 2 hours                              elastic_mendeleev
                       busybox3     7f920f1690ee        busybox             "sh"                2 hours ago         Up 2 hours                              compassionate_lederberg
                    $ docker network connect my_net2 c457442c2343
                        in busybox1, eth1@if19 is created with my_net2 network:
                            $ ip r
                                8: eth0@if9: <BROADCAST,MULTICAST,UP,LOWER_UP,M-DOWN> mtu 1500 qdisc noqueue 
                                    link/ether 02:42:ac:11:00:02 brd ff:ff:ff:ff:ff:ff
                                    inet 172.17.0.2/16 brd 172.17.255.255 scope global eth0
                                       valid_lft forever preferred_lft forever
                                18: eth1@if19: <BROADCAST,MULTICAST,UP,LOWER_UP,M-DOWN> mtu 1500 qdisc noqueue 
                                    link/ether 02:42:ac:16:10:03 brd ff:ff:ff:ff:ff:ff
                                    inet 172.22.16.3/24 brd 172.22.16.255 scope global eth1
                                       valid_lft forever preferred_lft forever
                    now ping busybox1 from busybox2 is worked
                        $ ping 172.22.16.3 -I 172.22.16.2 -c 3

                    the network toplogy is (docker-network-3.png)
                        +-------------------------+
                        |        busybox1         |     busybox2        busybox3
                        |172.17.0.2   172.22.16.3 |    172.22.16.2     172.22.16.8
                        |eth0         eth1        |     eth0            eth0
                        +-------------------------+      |               |
                          |            |                 |               |
                          |            |                 |               |             container
                        ------------------------------------------------------------------------
                          |            |                 |               |             host
                          |            |                 |               |
                        veth1        veth4             veth2           veth3
                          |            |                 |               |
                          |         +--------------------------------------+
                        docker0     |               br-xxxxx               |
                        172.17.0.1  |               my_net2                |
                        docker host |               172.22.16.1            |
                                    +--------------------------------------+

    ## inter-container comunication 
        ip  -> container should contain same network
            --network=
            docker network connect

        Docker DNS server
            $ docker run -it --network=my_net2 -name=bbox1 busybox
            $ docker run -it --network=my_net2 -name=bbox2 busybox
            in bbox2, ping bbox1 through name will work:
            $ ping -c 3 bbox1
            NOTE: Only user-defined network can use docker DNS

        joined container
            joined containers share same network stack, network card and configuration info, can communicate through 127.0.0.1 directly
            usually used in satuations where high effecience communacation required between containers through loopback, or in hope of supervisor other container's network traffic flow 
            first create a httpd container
                $ docker run -d -it --name=web1 httpd
            then create busybox, and specify jointed container web1
                $ docker run -it --network=container:web1 busybox

    ## Visit outside world from container
        by default, the container can visit outside network(the network outside container, not specify to internet) 
        Why it can ping outside:
            loop up docker host iptables rules:
                $ iptables -t nat -S
                    ...
                    -A POSTROUTING -s 172.17.0.0/16 ! -o docker0 -j MASQUERADE
                    ...
                it means if br docker0 receive out packets from 172.17.0.0/16, then pass it to MASQUERADE to deal with
                what MASQUERADE did is replace packet ori address with host addr, and send out, i.e. it did a NAT (network address translate) 
            how NAT is achived
                $ ip r
                    default via 10.0.2.2 dev enp0s3 proto dhcp metric 100   -> defalut router through enp0s3 to send packet, so we need listen icmp(ping) packet on enp0s3 and docker0 
        
                when ping www.google.com from container, docker0 receive busybox ping packet, source ip 172.17.0.3, it's ok, and pass to MASQUERADE to handle
                $ tcpdump -i docker0 -n icmp
                    14:54:56.223184 IP 172.17.0.3 > 172.217.161.164: ICMP echo request, id 2304, seq 19, length 64
                    14:54:56.261916 IP 172.217.161.164 > 172.17.0.3: ICMP echo reply, id 2304, seq 19, length 64

                in enp0s3, ori addr for ping packet changed to enp0s3's ip 10.0.2.15 from 172.17.0.3, this is the result of iptable NAT rules, to ensure data packet can reach outside
                $ tcpdump -i enp0s3 -n icmp
                    14:55:17.295493 IP 10.0.2.15 > 172.217.161.164: ICMP echo request, id 2304, seq 40, length 64
                    14:55:17.334220 IP 172.217.161.164 > 10.0.2.15: ICMP echo reply, id 2304, seq 40, length 64

                the toplogy(docker-network-4.png)

                                               |                           |
                    www.google.com             |         docker host       |            container network
                                        +-------------+                    |
                        network <-------|   enp0s3    |<-- NAT <-----------|
                                        |  10.0.2.15  |                    |
                                        +-------------+                    |
                                               |                    +----------------+     +----------------+
                                               |                    |    docker0     |     |    busybox     |
                                               |                    |   172.17.0.1   |<----|   172.17.0.3   |
                                               |                    +----------------+     +----------------+
                                               |                           |
                                               |                           |  outband request from container
                                               |                           |

    ## Visit container from outside 
        port forwarding: map docker service port1 to host port2, outside through port2 to visit the container 
        $ docker run -d -p 80 httpd     -> map container 80 port to host
            9f49c86216027af7bcab197a989ca6ecd14f7957186f6b2ff14ebaec04c5909a
        $ docker ps
            CONTAINER ID        IMAGE               COMMAND              CREATED             STATUS              PORTS                   NAMES
            9f49c8621602        httpd               "httpd-foreground"   30 seconds ago      Up 28 seconds       0.0.0.0:32768->80/tcp   vibrant_khayyam
        $ docker port  9f49c8621602
            80/tcp -> 0.0.0.0:32768 
        through <host ip>:<32768> can visit container web service now
            $ curl 10.0.2.15:32768 
        also we can set host port to 8080
            $ docker run -d -p 8080:80 httpd
        each map port, host will start a docker-proxy process to deal the traffic for container
            $ ps -ef | grep docker-proxy

        toplogy(docker-network-5.png)
                                               |                           |
                    www.google.com             |         docker host       |            container network
                                        +-------------+                    |
                        network <-------|   enp0s3    |<-- NAT <-----------|            
                                        |  10.0.2.15  |                    |  outband request from container             
                                        +-------------+                    |               
                                          ^    |   |                +----------------+     +----------------+
                                          |    |   |                |    docker0     |<----|    busybox     |
                    inbound request-------+    |   |                |   172.17.0.1   |     |   172.17.0.3   |
                    to exposed port            |   |                +----------------+     +----------------+
                      tcp 32768                |   |                    ^  |     |
                                               |   |                    |  |     |         +----------------+
                                               |   +--> docker-proxy ---+  |     |         |     httpd      |
                                               |                           |     +-------->|   172.17.0.4   |
                                               |                           |     tcp 80    +----------------+
                                               |                           |

7. Storage
    ## storage driver managed image layer and container layer
        copy-on-write
        - new data will store in container layer 
        - modify exist data will copy data from image layer to container layer first, the modified data will be saved in container layer first, image layer keep unchanged
        - if multi layer contain same named files, user can only visit the toppest layer

        AUFS、Device Mapper、Btrfs、OverlayFS、VFS and ZFS

        $docker info
            Storage Driver: overlay2
                Backing Filesystem: extfs
                Supports d_type: true
                Native Overlay Diff: true

    ## Data Volume
        Data Volume actually is files or folder in docker host file system, can be directly mounted to docker's fs.
        - it's files or folder, not no-formatted disk(block device)
        - container can w/r volume data
        - volume data can be saved permemently, even container which used the volume is destroied.

        bind mount
            mount exist file or folder in host to container
            -v <host path>:<container path>                         # mount folder
            -v <host path>/file:<container path>/file_container     # mount a single file, the file must exist in host, otherwise it will be treated as folder and mounter to container
            -v <host path>:<container path>:ro                      # read only in container
            if the path is same, container file will be hidden
            update content:
                $ docker cp host_path container_id:path_in_container
                or modify files in host or container

        docker managed volume
            -v <container path>     # no need to specify host path
            $ docker inspect short_id
                "Mounts": [
                    "Source": "/var/lib/docker/volumes/xxx
            $ docker volume ls
            
            data in container path will copy to host

        bind mount vs docker managed volume
                             | bind mount	        |   docker managed volume

            volume position  | can be specified     |   /var/lib/docker/volumes/...

            impact on exist  | hide and replace     |
            mount point      | by volume content	|   copy original data to volume

            single file      | support              |   no, only folder

            authority        | rd only / rw         |   r/w    

            porting          | weak, bind with host |   strong

        data share
            a. mount same mount point to containers

            b. volume container - host and container decouple, but data is still in host
                $ docker create --name vc_data \
                    -v host_path:container_path \           # bind mount
                    -v container_path \                     # docker managed volume
                    busybox
                $ docker run --name web1 -d -p 80 --volume-from vc_data httpd

            c. data-packed volume container - data is totally in volume container
                create Dockerfile
                    FROM busybox:latest
                    ADD host_path container_path        # cp host content to container
                    VOLUME container_path               # save as -v

                build image datapacked 
                    $ docker build -t datapacked .

                using new image datapacked to create data-packed volume container
                    $ docker create --name vc_data datapacked

                create container using the newly created data-packed volume container
                    $ docker run --name web1 -d -p 80 --volume-from vc_data httpd
            
        data backup/recovery/transfor/destroy
            backup - backup host content
            recovery - using the backuped host content
            transfor - stop container first, then mount original host volume
            destory
                $ docker rm -v   will delete docker managed volume
                $ docker volume rm $(docker volume ls -q)

8. Multi-host management
    docker machine
        https://docs.docker.com/machine/install-machine/
        $ base=https://github.com/docker/machine/releases/download/v0.16.0 &&
          curl -L $base/docker-machine-$(uname -s)-$(uname -m) >/tmp/docker-machine &&
          sudo install /tmp/docker-machine /usr/local/bin/docker-machine

        install docker machine tab completion script
            https://github.com/docker/machine/tree/master/contrib/completion/bash
            cp above 3 scripts to /etc/bash_completion.d 
            add PS1='[\u@\h \W$(__docker_machine_ps1)]\$ '  to '$HOME/.bashrc：

        $ docker-machine ls

    create machine
        host1 docker machine          host2       host3
        192.168.56.101            92.168.56.102  192.168.56.103

        neew passwd less log on to host2/host3
        host1$ ssh-copy-id 192.168.56.102/3
        host1$ docker-machine create --driver generic --generic-ip-address=192.168.56.102 host2
        host2$ cat /etc/systemd/system/docker.service
            -H tcp://0.0.0.0:2376  make docker accept remote connect
            --tls* make safe certify and encrypt for remote connect

    manage machine
        host1$ docker-machine env host2     # show info about how to visit host2 
        host1$ eval $(docker-machine env host2)     # enter host2 to management
        host1$ docker-machine upgrade host2 host3   # upgrade machine's docker
        host1$ docker-machine config host2          # show configure of host2
        host1$ docker-machine stop/start/restart    # operate machine's os, not docker deamon
        host1$ docker-machine scp host2:/tmp/a host3:/tmp/b  # copy file between host2/host3

9. Container Network - multi host
