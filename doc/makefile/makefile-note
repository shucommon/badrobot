## basic
    target ... : prerequisites ...
            command
            ...
            ...
## $
	Automatic variables are set by make after a rule is matched. They provide access to elements from the target and prerequisite lists so you don’t have to explicitly specify any filenames. They are very useful for avoiding code duplication, but are critical when defining more general pattern rules.
	There are seven “core” automatic variables:

	$@: The filename representing the target.
	$%: The filename element of an archive member specification.
	$<: The filename of the first prerequisite.
	$?: The names of all prerequisites that are newer than the target, separated by spaces.
	$^: The filenames of all the prerequisites, separated by spaces. This list has duplicate filenames removed since for most uses, such as compiling, copying, etc., duplicates are not wanted.
	$+: Similar to $^, this is the names of all the prerequisites separated by spaces, except that  $+ includes duplicates. This variable was created for specific situations such as arguments to linkers where duplicate values have meaning.
	$*: The stem of the target filename. A stem is typically a filename without its suffix. Its use outside of pattern rules is discouraged.


## Makefile filename
	GNUmakefile/Makefile/makefile
	make -f user_defined_makefile_name

## include other makefile
	include <filename>
	Note: can\'t start with <tab>, can contain whitespace

## -
	add '-' before a command, make the build continue when encounter error.
	-include = sinclude

## ENV MAKEFILE
	not suggest to use. when defined, make will do an action similar to include which indicate by MAKEFILE env

## make steps
	1. read in all Makefile
	2. read all included Makefile
	3. init variables
    4. derive hide rules(推导隐晦规则), and analysis all rules
	5. create dependence list for all objs files
	6. depend on dependence list, decide which objc need re-generate
	7. exec cmds
