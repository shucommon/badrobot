python Zen  #python 之蝉
    import this

## variable
	string 
        define:
            'this is a string'
            "this is also a string"
            'I told my friend, "Python is my favorite language!"'
            "The language 'Python' is named after Monty Python, not the snake."
            "One of Python's strengths is its diverse and supportive community."
        function
            name="hello"
            name.title()    first alp upper
            name.upper()
            name.lower()
            name.rstrip()   delete the blank character in end of the string
            name.lstrip()   delete the blank character in start of the string
            name.strip()    delete the blank character in both end and start of the string

            age=18
            str(age)

            concatenate
                first_name = "ada"
                last_name = "lovelace"
                full_name = first_name + " " + last_name

            \n      new line
            \t      tab

    Number
        int
            + - * / **(power)

        float
            dot in number

        python 2 : 3/2 = 1
        python 3 : 3/2 = 1.5

    list : []
        bicycles = ['trek', 'cannondale', 'redline', 'specialized']
        bicycles[0]     first one 
        bicycles[-1]    the last one
        bicycles[-2]    the one before last one
        ...

        bicycles.append(new_elem)   add to tail
        bicycles.insert(index, new_elem)     insert to index
        del bicycles[0]             remove an element
        bicycles.pop()              delete last element and return the element
        bicycles.pop(index)         delete element in index and return the element
        bicycles.remove(element_name)         delete last specific element(the first one) in list, you  must know the name first 

        sort():  permerment change
            cars = ['bmw', 'audi', 'toyota', 'subaru']
            cars.sort()
            cars.sort(reverse=True)
            cars.reverse()  # list reverse
            len(cars)  # list length 

        sorted(cars):  temperary change 
        # print(sorted(cars, revers=True))

    create list of numbers
        for value in range(1,6):     1-5
        numbers = list(range(1,6))  # [1, 2, 3, 4, 5]
        even_numbers = list(range(2,11,2)) # [2, 4, 6, 8, 10]

        >>> digits = [1, 2, 3, 4, 5, 6, 7, 8, 9, 0] 
        >>> min(digits)
        >>> max(digits)
        >>> sum(digits)

    list parse
        squares = [value**2 for value in range(1,11)] #[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]
    list slice
        players = ['charles', 'martina', 'michael', 'florence', 'eli']
        print(players[0:3])  # print 0,1,2 element
        print(players[:3])  # print 0,1,2 element
        print(players[2:])  # print 2,3,4 element
        print(players[-2:])  # print last 2 elements

    list copy
        lst1=[1,2,3]
        lst2=lst1           # same as c array, lst1,lst2 point to same array
        lst3=lst1[:]        # copy lst1 to lst3, get a different array

    tuple : ()
        unchangable list is called tuple
        tp=(1,2)
        tp[0] = 3 # wrong
        tp=(2,3)  # it's ok

## controll logic
    if statement
        if xx == xx:    True/False
        if xx != xx:    True/False
        if xx != xx and/or xx == xx:    True/False
        if conditional_test:
            do something

        if age >= 18:
            do something
        else:
            do something

        if-elif-else

        requested_toppings = []
        if requested_toppings:    # test list none

    in/not in:
        requested_toppings = ['mushrooms', 'onions', 'pineapple']
        'mushrooms' in requested_toppings  # True
        'mushrooms' not in requested_toppings  # False 

    bool
        True  False
    
## dictionary {} : key-value pairs
    alien_0 = {'color': 'green', 'points': 5}
    print(alien_0['color'])
    print(alien_0['points'])
    alien_0['new_ele'] = 'new_value' # add new element
    del alien_0['points']   # delete element
    for key, value in alien_0.items():   # iterate dict
    for key in alien_0.keys():           # iterate key
    for key in alien_0:                  # default iterate key
    for key in sorted(alien_0.keys()):   # return sorted keys
    for value in alien_0.values():           # iterate values 
    for value in set(alien_0.values()):      # delete duplicatate values 

    dictionary list
        alien_0 = {'color': 'green', 'points': 5}
        alien_1 = {'color': 'yellow', 'points': 10}
        alien_2 = {'color': 'red', 'points': 15}
        aliens = [alien_0, alien_1, alien_2]
        for alien in aliens:
            print(alien)

    list in dictionary
        pizza = {
            'crust': 'thick',
            'toppings': ['mushrooms', 'extra cheese'],
            }

    dic in dic

## user input & while loop
    input()     # stop and wait user input
        message = input("Tell me something, and I will repeat it back to you: ")
        print(message)
    the input is treat as string, even it's number, using int() to convert to number

    python 2.7 
        raw_input() same as input() in python3
        input()   # treat as python code

    while loop
        current_number = 1
        while current_number <= 5:
            print(current_number)
            current_number += 1

## function
    def func():
    def describe_pet(pet_name, animal_type='dog'):
    describe_pet(animal_type='hamster', pet_name='harry')
    function_name(list_name) # list pass to function is something like c pass pointer
    function_name(list_name[:]) # pass list copy to function, won't change original list
    def func(*parm):        # changeable parm number, python create tuple as input for parm
    def func(**parm):       # changeable key parm number
        def build_profile(first, last, **user_info):
            profile = {}
            profile['first_name'] = first
            profile['last_name'] = last

            for key, value in user_info.items():
                profile[key] = value

            return profile

        user_profile = build_profile('albert', 'einstein', 
                                    location='princeton',
                                    field='physics')
        print(user_profile)

## module 
    import module_name
    from module_name import function_name
    from module_name import function_0, function_1, function_2
    using as to rename the imported function or moudle name 
        from module_name import function_name as fn
        import module_name as mn
    import all function from a modules
        from module_name import *

## class
    example
        class Dog():
            def __init__(self, name, age):
                self.name = name
                self.age = age

            def sit(self):
                print(self.name.title() + " is now sitting.")
            def roll_over(self):
                print(self.name.title() + " rolled over!")

        my_dog = Dog('willie', 6)

    python2.7
        class ClassName(object):
            --snip--

    inherate
        class Car():
            ...

        class ElectricCar(Car):
            def __init__(self, make, model, year): 
                super().__init__(make, model, year) # init father class first

    python2.7
        class Car(object):
            def __init__(self, make, model, year):
            --snip--

        class ElectricCar(Car):
            def __init__(self, make, model, year):
            super(ElectricCar, self).__init__(make, model, year)
            --snip--

    rewrite function on superclass in child class will override the function in super

    import class
        from car import Car
        from car import ElectricCar
        from car import Car, ElectricCar
        import car      # import whole module
        from module_name import *


## file and exception
    with open('pi_digits.txt') as file_object:
        contents = file_object.read()

    for line in file_object:    # read one line by line
        print(line)

    read()      # read all
    readlines() # read all line by line

    >>> message = "I really like dogs."
    >>> message.replace('dog', 'cat')

    with open(filename, 'w') as file_object:
        file_object.write("I love programming.")
    
    r read  #default
    w write
    a append
    r+ read and write

    python only can write string to file
    write() won't add '\n' in the end

    try-except
    try-except-else
        try:
            print(5/0)
        except ZeroDivisionError:
            print("You can't divide by zero!")
            #pass
        else:
            xx

    try:
        with open(filename) as f_obj:
            contents = f_obj.read()
    except FileNotFoundError:

    split()

    >>> line = "Row, row, row your boat"
    >>> line.count('row')
    2
    >>> line.lower().count('row')
    3

    json.load()
    json.dump()
        number_rw.py

## unittest
    import unittest

    class NamesTestCase(unittest.TestCase):
        def setUp(self):

        def test_xxx(self):
            assertEqual(a, b)
            assertNotEqual(a, b)
            assertTrue(x)
            assertFalse(x)
            assertIn(item , list )
            assertNotIn(item , list )

#pygame
    linux
        python2.7
            $ sudo apt-get install python-pygame
        python 3
            $ sudo apt-get install python3-dev mercurial
            $ sudo apt-get install libsdl-image1.2-dev libsdl2-dev libsdl-ttf2.0-dev

            $ sudo apt-get install libsdl-mixer1.2-dev libportmidi-dev
            $ sudo apt-get install libswscale-dev libsmpeg-dev libavformat-dev libavcode-dev
            $ sudo apt-get install python-numpy

            $ pip install --user hg+http://bitbucket.org/pygame/pygame
            $ pip3 install --user hg+http://bitbucket.org/pygame/pygame

    os x
        $ brew install hg sdl sdl_image sdl_ttf
        $ brew install sdl_mixer portmidi
        $ pip3 install --user hg+http://bitbucket.org/pygame/pygame
        
# matplotlib
	$ sudo apt-get install python3-matplotlib
	$ sudo apt-get install python3.7-dev python3-tk tk-dev
	$ sudo apt-get install libfreetype6-dev g++
	$ pip3 install --user matplotlib

# pygal  vector 
	pip install --user pygal
	pip3 install pygal_maps_world

	world map
		american.py
		country_code.py
		world_population.py


# csv file
	highs_lows.py
	>>> from datetime import datetime
	>>> first_date = datetime.strptime('2014-7-1', '%Y-%m-%d') >>> print(first_date)
		2014-07-01 00:00:00

# web api
	https://api.github.com/search/repositories?q=language:python&sort=stars
	https://api.github.com/rate_limit 		-- visit rate limit 

	hacker news, a webset share program and technical artical
	Hacker News(http://news.ycombinator.com/)

	https://hacker-news.firebaseio.com/v0/item/9884165.json

# web app
	http://djangoproject.com/

	virtual-env
		apt-get install python3-venv

		python3 -m venv ll_env		# create virtual env ll_env
		virtualenv ll_env --python=python3
		source ll_env/bin/active
		deactivate

		sudo apt install python-virtualenv
		sudo apt install python3-virtualenv

# Django
	pip install Django
	django-admin.py startproject learning_log .
	python manage.py migrate
	python manage.py runserver

	python manage.py startapp learning_logs
	1. modify models.py
	2. python manage.py makemigrations learning_logs
	3. python manage.py migrate

	python manage.py createsuperuser
	modify admin.py

	Django shell
		 $ python manage.py shell

	pip install django-bootstrap3

# make docker image
	https://dzone.com/articles/one-exception-handler-for-all-packaged-subprograms
	1. install docker
	2. build your app - Build a Django Application
		$ sudo pip install django==1.9
		$ django-admin startproject your_app_name 
	3. Requirements File
		$ pip freeze > requirements.txt
		note: delete pkg-resources
	4. Create Dockerfile
		# set the base image 
		FROM python:3.6
		# File Author / Maintainer
		MAINTAINER Qiang, Guo 
		#add project files to the usr/src/app folder
		ADD . /usr/src/app
		#set directoty where CMD will execute 
		WORKDIR /usr/src/app
		COPY requirements.txt ./
		# Get pip to download and install requirements:
		RUN pip install --no-cache-dir -r requirements.txt
		# Expose ports
		EXPOSE 8000
		# default command to execute    
		CMD exec gunicorn your_app_name.wsgi:application --bind 0.0.0.0:8000 --workers 3
	5. Build the Docker Image
		$ [sudo] docker build -t django_application_image .
		$ [sudo] docker images
		$ [sudo] docker run -p 8000:8000 -i -t django_application_image
	6. You should see a message that gunicorn is serving your app at http://0.0.0.0:8000.
		Navigate to your servers IP (ip_address:8000) and you should see the Django welcome page.
	7. push local docker image to server
		a. login https://hub.docker.com/ and create a repo, e.g. named webapp
		b. You can name your local images either when you build it, using
			$ docker build -t <hub-user>/<repo-name>[:<tag>],
		   by re-tagging an existing local image
			$ docker tag <existing-image> <hub-user>/<repo-name>[:<tag>],
		   or by using
			$ docker commit <existing-container> <hub-user>/<repo-name>[:<tag>]
		   to commit changes.
		c. $ docker login docker.io
		d. $ docker push <hub-user>/<repo-name>:<tag>


## char to int and verse
    >>> chr(97)
    'a'
    >>> ord('a')
    97
